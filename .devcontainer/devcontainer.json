{
  "image": "mcr.microsoft.com/vscode/devcontainers/typescript-node:dev-20-bullseye",
  "features": {
    "ghcr.io/devcontainers-contrib/features/turborepo-npm:1": {},
    "ghcr.io/devcontainers-contrib/features/typescript:2": {},
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.11",
      "toolsToInstall": [
        "flake8",
        "black",
        "mypy",
        "poetry"
      ]
    },
    "ghcr.io/devcontainers/features/aws-cli:1": {},
		"ghcr.io/devcontainers-contrib/features/aws-cdk:2": {},
    "ghcr.io/tomharvey/devcontainer-features/aws-sso-util:1": {},
    "ghcr.io/devcontainers/features/docker-in-docker:2": {}
  },
  "customizations": {
    "codespaces": {
      "openFiles": [
        "README.md"
      ]
    },
    "vscode": {
      "extensions": [
        "ms-vscode.typescript-language-features",
        "esbenp.prettier-vscode",
        "ms-python.python",
        "ms-python.black-formatter",
        "ms-python.vscode-flake8",
        "ms-python.vscode-pylance",
        "charliermarsh.ruff",
        "github.vscode-pull-request-github",
				"eamodio.gitlens",
        "davidanson.vscode-markdownlint",
				"TabNine.tabnine-vscode",
				"ms-toolsai.jupyter",
        "amazonwebservices.aws-toolkit-vscode"
      ],
      "settings": {
        "[python]": {
          "formatting.provider": "black",
          "languageServer": "Pylance",
          "analysis.typeCheckingMode": "basic",
					// Here we state that we want Ruff to automatically format our code on save.
					// You might hate this - you can delete it.
					// Otherwise, it's a great way to enforce sensible and consistent
					// formatting on your code.
					"editor.codeActionsOnSave": {
						"source.organizeImports": "always",
						"source.fixAll": "explicit"
					},
					"editor.formatOnSave": true,
					"editor.defaultFormatter": "TabNine.tabnine-vscode"
        }
      }
    }
  },
  "containerEnv": {
    // https://python-poetry.org/docs/configuration/
    "POETRY_VIRTUALENVS_IN_PROJECT": "true",
    "POETRY_VIRTUALENVS_CREATE": "true",
    "PYTHONPATH": "${PYTHONPATH}:${workspaceFolder}/backend",
    		// The below needs to be configured to match your AWS SSO configuration if you're using AWS SSO.
		// You could opt to use static AWS IAM Keys instead.
		// If you do use static IAM keys, see further below for sharing `/.aws`
		// between your local machine and your development environment.
		"AWS_DEFAULT_SSO_START_URL": "https://d-9767492cea.awsapps.com/start",
		"AWS_DEFAULT_SSO_REGION": "ap-southeast-2",

		// This configures the region that you will create AWS resources in by default.
		// It's common to pick one closer to you - I think it's unnessecary and us-east-1
		// is the msot feature complete, the lowest cost and so is a good default.
		"AWS_DEFAULT_REGION": "ap-southeast-2"
  },
  "forwardPorts": [
    3000,
    8000
  ],
  "postCreateCommand": [
    "cd backend && poetry install",
    "cd ../infra && poetry install",
    "cd ../infra && npm install -g aws-cdk",
    "cd ../frontend && npm install"
  ]
}